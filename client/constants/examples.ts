import type { Language } from "./languages.ts";

export type Group = {
  index: number;
  id: string;
  title: string;
  examples: Example[];
};

export type Example = {
  groupId: string;
  id: string;
  names: Record<Language, string | null>;
};

export const examples: Example[] = [
  // examples 0 - CSAC (not to be shown in the menu)
  {
    groupId: "CSAC",
    id: "LifeStart",
    names: {
      BASIC: "Initialising Conway’s Game of Life",
      C: "Initialising Conway’s Game of Life",
      Java: "Initialising Conway’s Game of Life",
      Pascal: "Initialising Conway’s Game of Life",
      Python: "Initialising Conway’s Game of Life",
      TypeScript: "Initialising Conway’s Game of Life",
    },
  },
  {
    groupId: "CSAC",
    id: "Mandelbrot",
    names: {
      BASIC: "Mandelbrot set",
      C: "Mandelbrot set",
      Java: "Mandelbrot set",
      Pascal: "Mandelbrot set",
      Python: "Mandelbrot set",
      TypeScript: "Mandelbrot set",
    },
  },
  {
    groupId: "CSAC",
    id: "MandelbrotMini",
    names: {
      BASIC: "Mandelbrot mini",
      C: "Mandelbrot mini",
      Java: "Mandelbrot mini",
      Pascal: "Mandelbrot mini",
      Python: "Mandelbrot mini",
      TypeScript: "Mandelbrot mini",
    },
  },
  {
    groupId: "CSAC",
    id: "MandelbrotSpectrum",
    names: {
      BASIC: "Mandelbrot spectrum",
      C: "Mandelbrot spectrum",
      Java: "Mandelbrot spectrum",
      Pascal: "Mandelbrot spectrum",
      Python: "Mandelbrot spectrum",
      TypeScript: "Mandelbrot spectrum",
    },
  },
  {
    groupId: "CSAC",
    id: "MandelbrotMiniSpectrum",
    names: {
      BASIC: "Mandelbrot mini spectrum",
      C: "Mandelbrot mini spectrum",
      Java: "Mandelbrot mini spectrum",
      Pascal: "Mandelbrot mini spectrum",
      Python: "Mandelbrot mini spectrum",
      TypeScript: "Mandelbrot mini spectrum",
    },
  },
  {
    groupId: "CSAC",
    id: "SierpinskiColour",
    names: {
      BASIC: "Sierpinski colour",
      C: "Sierpinski colour",
      Java: "Sierpinski colour",
      Pascal: "Sierpinski colour",
      Python: "Sierpinski colour",
      TypeScript: "Sierpinski colour",
    },
  },
  {
    groupId: "CSAC",
    id: "SierpinskiIFS",
    names: {
      BASIC: "Sierpinski IFS",
      C: "Sierpinski IFS",
      Java: "Sierpinski IFS",
      Pascal: "Sierpinski IFS",
      Python: "Sierpinski IFS",
      TypeScript: "Sierpinski IFS",
    },
  },
  {
    groupId: "CSAC",
    id: "BarnsleyColour",
    names: {
      BASIC: "Barnsley colour",
      C: "Barnsley colour",
      Java: "Barnsley colour",
      Pascal: "Barnsley colour",
      Python: "Barnsley colour",
      TypeScript: "Barnsley colour",
    },
  },
  {
    groupId: "CSAC",
    id: "BarnsleyIFS",
    names: {
      BASIC: "Barnsley IFS",
      C: "Barnsley IFS",
      Java: "Barnsley IFS",
      Pascal: "Barnsley IFS",
      Python: "Barnsley IFS",
      TypeScript: "Barnsley IFS",
    },
  },
  {
    groupId: "CSAC",
    id: "DragonColour",
    names: {
      BASIC: "Dragon colour",
      C: "Dragon colour",
      Java: "Dragon colour",
      Pascal: "Dragon colour",
      Python: "Dragon colour",
      TypeScript: "Dragon colour",
    },
  },
  {
    groupId: "CSAC",
    id: "DragonIFS",
    names: {
      BASIC: "Dragon IFS",
      C: "Dragon IFS",
      Java: "Dragon IFS",
      Pascal: "Dragon IFS",
      Python: "Dragon IFS",
      TypeScript: "Dragon IFS",
    },
  },
  {
    groupId: "CSAC",
    id: "TreeIFS",
    names: {
      BASIC: "Tree IFS",
      C: "Tree IFS",
      Java: "Tree IFS",
      Pascal: "Tree IFS",
      Python: "Tree IFS",
      TypeScript: "Tree IFS",
    },
  },
  {
    groupId: "CASC",
    id: "WaveSuperposer",
    names: {
      BASIC: "Hugh Wallis’s wave superposer",
      C: "Hugh Wallis’s wave superposer",
      Java: "Hugh Wallis’s wave superposer",
      Pascal: "Hugh Wallis’s wave superposer",
      Python: "Hugh Wallis’s wave superposer",
      TypeScript: "Hugh Wallis’s wave superposer",
    },
  },
  // examples 1 - Drawing
  {
    groupId: "Drawing",
    id: "DrawPause",
    names: {
      BASIC: "Simple drawing with pauses",
      C: "Simple drawing with pauses",
      Java: "Simple drawing with pauses",
      Pascal: "Simple drawing with pauses",
      Python: "Simple drawing with pauses",
      TypeScript: "Simple drawing with pauses",
    },
  },
  {
    groupId: "Drawing",
    id: "SmileyFace",
    names: {
      BASIC: "Smiley face [PENUP, ELLBLOT]",
      C: "Smiley face [PENUP, ELLBLOT]",
      Java: "Smiley face [PENUP, ELLBLOT]",
      Pascal: "Smiley face [PENUP, ELLBLOT]",
      Python: "Smiley face [PENUP, ELLBLOT]",
      TypeScript: "Smiley face [PENUP, ELLBLOT]",
    },
  },
  {
    groupId: "Drawing",
    id: "ThePlough",
    names: {
      BASIC: "The plough [SETXY, POLYLINE]",
      C: "The plough [SETXY, POLYLINE]",
      Java: "The plough [SETXY, POLYLINE]",
      Pascal: "The plough [SETXY, POLYLINE]",
      Python: "The plough [SETXY, POLYLINE]",
      TypeScript: "The plough [SETXY, POLYLINE]",
    },
  },
  {
    groupId: "Drawing",
    id: "OlympicRings",
    names: {
      BASIC: "Olympic rings (uses a variable)",
      C: "Olympic rings (uses a variable)",
      Java: "Olympic rings (uses a variable)",
      Pascal: "Olympic rings (uses a variable)",
      Python: "Olympic rings (uses a variable)",
      TypeScript: "Olympic rings (uses a variable)",
    },
  },
  {
    groupId: "Drawing",
    id: "ForLoop",
    names: {
      BASIC: "FOR loop (uses a counting variable)",
      C: "FOR loop (uses a counting variable)",
      Java: "FOR loop (uses a counting variable)",
      Pascal: "FOR loop (uses a counting variable)",
      Python: "FOR loop (uses a counting variable)",
      TypeScript: "FOR loop (uses a counting variable)",
    },
  },
  {
    groupId: "Drawing",
    id: "TriangleSpin",
    names: {
      BASIC: "Spinning triangle pattern [MOVEXY]",
      C: "Spinning triangle pattern [MOVEXY]",
      Java: "Spinning triangle pattern [MOVEXY]",
      Pascal: "Spinning triangle pattern [MOVEXY]",
      Python: "Spinning triangle pattern [MOVEXY]",
      TypeScript: "Spinning triangle pattern [MOVEXY]",
    },
  },
  {
    groupId: "Drawing",
    id: "Circles",
    names: {
      BASIC: "Circling circles",
      C: "Circling circles",
      Java: "Circling circles",
      Pascal: "Circling circles",
      Python: "Circling circles",
      TypeScript: "Circling circles",
    },
  },
  {
    groupId: "Drawing",
    id: "NestedLoops",
    names: {
      BASIC: "Nested FOR loops [DIRECTION, RGB]",
      C: "Nested FOR loops [DIRECTION, RGB]",
      Java: "Nested FOR loops [DIRECTION, RGB]",
      Pascal: "Nested FOR loops [DIRECTION, RGB]",
      Python: "Nested FOR loops [DIRECTION, RGB]",
      TypeScript: "Nested FOR loops [DIRECTION, RGB]",
    },
  },
  {
    groupId: "Drawing",
    id: "RandomLines",
    names: {
      BASIC: "Random lines pattern [IF, PIXCOL, RECOLOUR]",
      C: "Random lines pattern [IF, PIXCOL, RECOLOUR]",
      Java: "Random lines pattern [IF, PIXCOL, RECOLOUR]",
      Pascal: "Random lines pattern [IF, PIXCOL, RECOLOUR]",
      Python: "Random lines pattern [IF, PIXCOL, RECOLOUR]",
      TypeScript: "Random lines pattern [IF, PIXCOL, RECOLOUR]",
    },
  },
  {
    groupId: "Drawing",
    id: "RandomEllipses",
    names: {
      BASIC: "Random ellipses pattern",
      C: "Random ellipses pattern",
      Java: "Random ellipses pattern",
      Pascal: "Random ellipses pattern",
      Python: "Random ellipses pattern",
      TypeScript: "Random ellipses pattern",
    },
  },
  // examples 2 - Procedures
  {
    groupId: "Procedures",
    id: "ColourSpiral",
    names: {
      BASIC: "Spiral of colours (REPEAT, RNDCOL)",
      C: "Spiral of colours (WHILE, RANDCOL)",
      Java: "Spiral of colours (WHILE, RANDCOL)",
      Pascal: "Spiral of colours (REPEAT, RANDCOL)",
      Python: "Spiral of colours (WHILE, RNDCOL)",
      TypeScript: "Spiral of colours (WHILE, RANDCOL)",
    },
  },
  {
    groupId: "Procedures",
    id: "SimpleProc",
    names: {
      BASIC: "Simple procedure [REPEAT, TURTD]",
      C: "Simple function [WHILE, TURTD]",
      Java: "Simple function [WHILE, TURTD]",
      Pascal: "Simple procedure [REPEAT, TURTD]",
      Python: "Simple function [WHILE, TURTD]",
      TypeScript: "Simple function [WHILE, TURTD]",
    },
  },
  {
    groupId: "Procedures",
    id: "ParameterProc",
    names: {
      BASIC: "Procedure with parameter",
      C: "Function with parameter",
      Java: "Function with parameter",
      Pascal: "Procedure with parameter",
      Python: "Function with parameter",
      TypeScript: "Function with parameter",
    },
  },
  {
    groupId: "Procedures",
    id: "ResizableFace",
    names: {
      BASIC: "Resizable face (hierarchical procedures)",
      C: "Resizable face (nested functions)",
      Java: "Resizable face (nested functions)",
      Pascal: "Resizable face (nested procedures)",
      Python: "Resizable face (nested functions)",
      TypeScript: "Resizable face (nested functions)",
    },
  },
  {
    groupId: "Procedures",
    id: "Polygons",
    names: {
      BASIC: "Polygons (uses 2 parameters) [POLYGON, POLYLINE]",
      C: "Polygons (uses 2 parameters) [POLYGON, POLYLINE]",
      Java: "Polygons (uses 2 parameters) [POLYGON, POLYLINE]",
      Pascal: "Polygons (uses 2 parameters) [POLYGON, POLYLINE]",
      Python: "Polygons (uses 2 parameters) [POLYGON, POLYLINE]",
      TypeScript: "Polygons (uses 2 parameters) [POLYGON, POLYLINE]",
    },
  },
  {
    groupId: "Procedures",
    id: "Stars",
    names: {
      BASIC: "Stars [ANGLES, FORGET]",
      C: "Stars [ANGLES, FORGET]",
      Java: "Stars [ANGLES, FORGET]",
      Pascal: "Stars [ANGLES, FORGET]",
      Python: "Stars [ANGLES, FORGET]",
      TypeScript: "Stars [ANGLES, FORGET]",
    },
  },
  {
    groupId: "Procedures",
    id: "PolygonRings",
    names: {
      BASIC: "Polygon rings (uses 3 parameters) [MOD]",
      C: "Polygon rings (uses 3 parameters) [MOD]",
      Java: "Polygon rings (uses 3 parameters) [MOD]",
      Pascal: "Polygon rings (uses 3 parameters) [MOD]",
      Python: "Polygon rings (uses 3 parameters) [MOD]",
      TypeScript: "Polygon rings (uses 3 parameters) [MOD]",
    },
  },
  {
    groupId: "Procedures",
    id: "Triangle1",
    names: {
      BASIC: "Simple triangle",
      C: "Simple triangle",
      Java: "Simple triangle",
      Pascal: "Simple triangle",
      Python: "Simple triangle",
      TypeScript: "Simple triangle",
    },
  },
  {
    groupId: "Procedures",
    id: "Triangle2",
    names: {
      BASIC: "Triangle procedure",
      C: "Triangle function",
      Java: "Triangle function",
      Pascal: "Triangle procedure",
      Python: "Triangle function",
      TypeScript: "Triangle function",
    },
  },
  {
    groupId: "Procedures",
    id: "Triangle3",
    names: {
      BASIC: "Triangle procedure with limit",
      C: "Triangle function with limit",
      Java: "Triangle function with limit",
      Pascal: "Triangle procedure with limit",
      Python: "Triangle function with limit",
      TypeScript: "Triangle function with limit",
    },
  },
  {
    groupId: "Procedures",
    id: "Triangles",
    names: {
      BASIC: "Recursive triangles",
      C: "Recursive triangles",
      Java: "Recursive triangles",
      Pascal: "Recursive triangles",
      Python: "Recursive triangles",
      TypeScript: "Recursive triangles",
    },
  },
  {
    groupId: "Procedures",
    id: "Factorials",
    names: {
      BASIC: "Recursive factorials [Function, OUTPUT]",
      C: "Recursive factorials [Function, OUTPUT]",
      Java: "Recursive factorials [Function, OUTPUT]",
      Pascal: "Recursive factorials [FUNCTION, OUTPUT]",
      Python: "Recursive factorials [Function, OUTPUT]",
      TypeScript: "Recursive factorials [Function, OUTPUT]",
    },
  },
  // examples 3 - Further
  {
    groupId: "Further",
    id: "YouAreHere",
    names: {
      BASIC: "Text and arrow (using PRINT)",
      C: "Text and arrow (using PRINT)",
      Java: "Text and arrow (using PRINT)",
      Pascal: "Text and arrow (using PRINT)",
      Python: "Text and arrow (using PRINT)",
      TypeScript: "Text and arrow (using PRINT)",
    },
  },
  {
    groupId: "Further",
    id: "CycleColours",
    names: {
      BASIC: "Cycling colours (using MOD)",
      C: "Cycling colours (using MOD)",
      Java: "Cycling colours (using MOD)",
      Pascal: "Cycling colours (using MOD)",
      Python: "Cycling colours (using MOD)",
      TypeScript: "Cycling colours (using MOD)",
    },
  },
  {
    groupId: "Further",
    id: "Clock",
    names: {
      BASIC: "Analogue clock (using REPEAT)",
      C: "Analogue clock (using REPEAT)",
      Java: "Analogue clock (using REPEAT)",
      Pascal: "Analogue clock (using REPEAT)",
      Python: "Analogue clock (using REPEAT)",
      TypeScript: "Analogue clock (using REPEAT)",
    },
  },
  {
    groupId: "Further",
    id: "DigitalClock",
    names: {
      BASIC: "Digital clock (using IF and WHILE)",
      C: "Digital clock (using IF and WHILE)",
      Java: "Digital clock (using IF and WHILE)",
      Pascal: "Digital clock (using IF and WHILE)",
      Python: "Digital clock (using IF and WHILE)",
      TypeScript: "Digital clock (using IF and WHILE)",
    },
  },
  {
    groupId: "Further",
    id: "Flashlights",
    names: {
      BASIC: "Flashlights (using Booleans)",
      C: "Flashlights (using Booleans)",
      Java: "Flashlights (using Booleans)",
      Pascal: "Flashlights (using Booleans)",
      Python: "Flashlights (using Booleans)",
      TypeScript: "Flashlights (using Booleans)",
    },
  },
  {
    groupId: "Further",
    id: "RefParams",
    names: {
      BASIC: "Reference parameters",
      C: "Reference parameters",
      Java: "Reference parameters",
      Pascal: "Reference parameters",
      Python: "Reference parameters",
      TypeScript: "Reference parameters",
    },
  },
  {
    groupId: "Further",
    id: "Balls3D",
    names: {
      BASIC: "3D colour effects",
      C: "3D colour effects",
      Java: "3D colour effects",
      Pascal: "3D colour effects",
      Python: "3D colour effects",
      TypeScript: "3D colour effects",
    },
  },
  {
    groupId: "Further",
    id: "StringFunctions",
    names: {
      BASIC: "Standard string functions",
      C: "Standard string functions",
      Java: "Standard string functions",
      Pascal: "Standard string functions",
      Python: "Standard string functions",
      TypeScript: "Standard string functions",
    },
  },
  {
    groupId: "Further",
    id: "UserStringFunctions",
    names: {
      BASIC: "User-defined string functions",
      C: "User-defined string functions",
      Java: "User-defined string functions",
      Pascal: "User-defined string functions",
      Python: "User-defined string functions",
      TypeScript: "User-defined string functions",
    },
  },
  {
    groupId: "Further",
    id: "ListFunctions",
    names: {
      BASIC: null,
      C: null,
      Java: null,
      Pascal: null,
      Python: "Python list functions",
      TypeScript: null,
    }
  },
  {
    groupId: "Further",
    id: "MathFunctions",
    names: {
      BASIC: "Mathematical functions",
      C: "Mathematical functions",
      Java: "Mathematical functions",
      Pascal: "Mathematical functions",
      Python: "Mathematical functions",
      TypeScript: "Mathematical functions",
    },
  },
  {
    groupId: "Further",
    id: "TrigGraphs",
    names: {
      BASIC: "Trigonometric graphs",
      C: "Trigonometric graphs",
      Java: "Trigonometric graphs",
      Pascal: "Trigonometric graphs",
      Python: "Trigonometric graphs",
      TypeScript: "Trigonometric graphs",
    },
  },
  // examples 4 - Movement
  {
    groupId: "Movement",
    id: "MovingBall",
    names: {
      BASIC: "Moving ball (using variables)",
      C: "Moving ball (using variables)",
      Java: "Moving ball (using variables)",
      Pascal: "Moving ball (using variables)",
      Python: "Moving ball (using variables)",
      TypeScript: "Moving ball (using variables)",
    },
  },
  {
    groupId: "Movement",
    id: "BouncingBall",
    names: {
      BASIC: "Bouncing ball (using variables)",
      C: "Bouncing ball (using variables)",
      Java: "Bouncing ball (using variables)",
      Pascal: "Bouncing ball (using variables)",
      Python: "Bouncing ball (using variables)",
      TypeScript: "Bouncing ball (using variables)",
    },
  },
  {
    groupId: "Movement",
    id: "TurtleMove",
    names: {
      BASIC: "Moving ball (using Turtle)",
      C: "Moving ball (using Turtle)",
      Java: "Moving ball (using Turtle)",
      Pascal: "Moving ball (using Turtle)",
      Python: "Moving ball (using Turtle)",
      TypeScript: "Moving ball (using Turtle)",
    },
  },
  {
    groupId: "Movement",
    id: "TurtleBounce",
    names: {
      BASIC: "Bouncing ball (using Turtle)",
      C: "Bouncing ball (using Turtle)",
      Java: "Bouncing ball (using Turtle)",
      Pascal: "Bouncing ball (using Turtle)",
      Python: "Bouncing ball (using Turtle)",
      TypeScript: "Bouncing ball (using Turtle)",
    },
  },
  {
    groupId: "Movement",
    id: "BouncingFace",
    names: {
      BASIC: "Bouncing face",
      C: "Bouncing face",
      Java: "Bouncing face",
      Pascal: "Bouncing face",
      Python: "Bouncing face",
      TypeScript: "Bouncing face",
    },
  },
  {
    groupId: "Movement",
    id: "MultiBounce",
    names: {
      BASIC: "Multiple bouncing balls",
      C: "Multiple bouncing balls",
      Java: "Multiple bouncing balls",
      Pascal: "Multiple bouncing balls",
      Python: "Multiple bouncing balls",
      TypeScript: "Multiple bouncing balls",
    },
  },
  {
    groupId: "Movement",
    id: "BouncingTriangle",
    names: {
      BASIC: "Bouncing triangle",
      C: "Bouncing triangle",
      Java: "Bouncing triangle",
      Pascal: "Bouncing triangle",
      Python: "Bouncing triangle",
      TypeScript: "Bouncing triangle",
    },
  },
  {
    groupId: "Movement",
    id: "BouncingShapes",
    names: {
      BASIC: "Multiple bouncing shapes",
      C: "Multiple bouncing shapes",
      Java: "Multiple bouncing shapes",
      Pascal: "Multiple bouncing shapes",
      Python: "Multiple bouncing shapes",
      TypeScript: "Multiple bouncing shapes",
    },
  },
  {
    groupId: "Movement",
    id: "GravitySteps",
    names: {
      BASIC: "Movement under gravity",
      C: "Movement under gravity",
      Java: "Movement under gravity",
      Pascal: "Movement under gravity",
      Python: "Movement under gravity",
      TypeScript: "Movement under gravity",
    },
  },
  {
    groupId: "Movement",
    id: "SolarSystem",
    names: {
      BASIC: "Solar system",
      C: "Solar system",
      Java: "Solar system",
      Pascal: "Solar system",
      Python: "Solar system",
      TypeScript: "Solar system",
    },
  },
  // examples 5 - Interaction
  {
    groupId: "Interaction",
    id: "AskInput",
    names: {
      BASIC: "Asking for typed input",
      C: "Asking for typed input",
      Java: "Asking for typed input",
      Pascal: "Asking for typed input",
      Python: "Asking for typed input",
      TypeScript: "Asking for typed input",
    },
  },
  {
    groupId: "Interaction",
    id: "QuickClick",
    names: {
      BASIC: "Mouse reaction game",
      C: "Mouse reaction game",
      Java: "Mouse reaction game",
      Pascal: "Mouse reaction game",
      Python: "Mouse reaction game",
      TypeScript: "Mouse reaction game",
    },
  },
  {
    groupId: "Interaction",
    id: "TypingTest",
    names: {
      BASIC: "Typing test (checking characters)",
      C: "Typing test (checking characters)",
      Java: "Typing test (checking characters)",
      Pascal: "Typing test (checking characters)",
      Python: "Typing test (checking characters)",
      TypeScript: "Typing test (checking characters)",
    },
  },
  {
    groupId: "Interaction",
    id: "TypingTestKeys",
    names: {
      BASIC: "Typing test (checking keys)",
      C: "Typing test (checking keys)",
      Java: "Typing test (checking keys)",
      Pascal: "Typing test (checking keys)",
      Python: "Typing test (checking keys)",
      TypeScript: "Typing test (checking keys)",
    },
  },
  {
    groupId: "Interaction",
    id: "IterationGame",
    names: {
      BASIC: "Iteration game (Collatz sequence)",
      C: "Iteration game (Collatz sequence)",
      Java: "Iteration game (Collatz sequence)",
      Pascal: "Iteration game (Collatz sequence)",
      Python: "Iteration game (Collatz sequence)",
      TypeScript: "Iteration game (Collatz sequence)",
    },
  },
  {
    groupId: "Interaction",
    id: "SpongeThrow",
    names: {
      BASIC: "Throwing sponges at a moving face",
      C: "Throwing sponges at a moving face",
      Java: "Throwing sponges at a moving face",
      Pascal: "Throwing sponges at a moving face",
      Python: "Throwing sponges at a moving face",
      TypeScript: "Throwing sponges at a moving face",
    },
  },
  {
    groupId: "Interaction",
    id: "Arcade",
    names: {
      BASIC: "Arcade shooting game",
      C: "Arcade shooting game",
      Java: "Arcade shooting game",
      Pascal: "Arcade shooting game",
      Python: "Arcade shooting game",
      TypeScript: "Arcade shooting game",
    },
  },
  {
    groupId: "Interaction",
    id: "ColourCells",
    names: {
      BASIC: "Colouring cells",
      C: "Colouring cells",
      Java: "Colouring cells",
      Pascal: "Colouring cells",
      Python: "Colouring cells",
      TypeScript: "Colouring cells",
    }
  },
  {
    groupId: "Interaction",
    id: "SnakeGame",
    names: {
      BASIC: "Snake (classic game)",
      C: "Snake (classic game)",
      Java: "Snake (classic game)",
      Pascal: "Snake (classic game)",
      Python: "Snake (classic game)",
      TypeScript: "Snake (classic game)",
    },
  },
  {
    groupId: "Interaction",
    id: "SimpleDraw",
    names: {
      BASIC: "Drawing to the mouse",
      C: "Drawing to the mouse",
      Java: "Drawing to the mouse",
      Pascal: "Drawing to the mouse",
      Python: "Drawing to the mouse",
      TypeScript: "Drawing to the mouse",
    },
  },
  {
    groupId: "Interaction",
    id: "PaintApp",
    names: {
      BASIC: "Painting application",
      C: "Painting application",
      Java: "Painting application",
      Pascal: "Painting application",
      Python: "Painting application",
      TypeScript: "Painting application",
    },
  },
  {
    groupId: "Interaction",
    id: "MultipleTurtles",
    names: {
      BASIC: "Multiple turtles and varying ANGLES",
      C: "Multiple turtles and varying ANGLES",
      Java: "Multiple turtles and varying ANGLES",
      Pascal: "Multiple turtles and varying ANGLES",
      Python: null,
      TypeScript: "Multiple turtles and varying ANGLES",
    },
  },
  // examples 6 - Files
  {
    groupId: "Files",
    id: "WriteAndReadFile",
    names: {
      BASIC: "Writing and reading a text file",
      C: "Writing and reading a text file",
      Java: "Writing and reading a text file",
      Pascal: "Writing and reading a text file",
      Python: "Writing and reading a text file",
      TypeScript: "Writing and reading a text file",
    },
  },
  {
    groupId: "Files",
    id: "RenameAndDeleteFile",
    names: {
      BASIC: "Renaming and deleting a file",
      C: "Renaming and deleting a file",
      Java: "Renaming and deleting a file",
      Pascal: "Renaming and deleting a file",
      Python: "Renaming and deleting a file",
      TypeScript: "Renaming and deleting a file",
    },
  },
  {
    groupId: "Files",
    id: "FileSearching",
    names: {
      BASIC: "File searching",
      C: "File searching",
      Java: "File searching",
      Pascal: "File searching",
      Python: "File searching",
      TypeScript: "File searching",
    },
  },
  {
    groupId: "Files",
    id: "SaveCSV",
    names: {
      BASIC: "Saving a CSV file",
      C: "Saving a CSV file",
      Java: "Saving a CSV file",
      Pascal: "Saving a CSV file",
      Python: "Saving a CSV file",
      TypeScript: "Saving a CSV file",
    },
  },
  {
    groupId: "Files",
    id: "ReadCSV",
    names: {
      BASIC: "Reading a CSV file",
      C: "Reading a CSV file",
      Java: "Reading a CSV file",
      Pascal: "Reading a CSV file",
      Python: "Reading a CSV file",
      TypeScript: "Reading a CSV file",
    },
  },
  {
    groupId: "Files",
    id: "RandomSentences",
    names: {
      BASIC: "Random sentences (using files)",
      C: "Random sentences (using files)",
      Java: "Random sentences (using files)",
      Pascal: "Random sentences (using files)",
      Python: "Random sentences (using files)",
      TypeScript: "Random sentences (using files)",
    },
  },
  {
    groupId: "Files",
    id: "FileCommands",
    names: {
      BASIC: "File commands",
      C: "File commands",
      Java: "File commands",
      Pascal: "File commands",
      Python: "File commands",
      TypeScript: "File commands",
    },
  },
  {
    groupId: "Files",
    id: "DirectoryCommands",
    names: {
      BASIC: "Directory commands",
      C: "Directory commands",
      Java: "Directory commands",
      Pascal: "Directory commands",
      Python: "Directory commands",
      TypeScript: "Directory commands",
    },
  },
  // examples 7 - Cellular
  {
    groupId: "Cellular",
    id: "TippingPoint",
    names: {
      BASIC: "Tipping point (city epidemic)",
      C: "Tipping point (city epidemic)",
      Java: "Tipping point (city epidemic)",
      Pascal: "Tipping point (city epidemic)",
      Python: "Tipping point (city epidemic)",
      TypeScript: "Tipping point (city epidemic)",
    },
  },
  {
    groupId: "Cellular",
    id: "Disease",
    names: {
      BASIC: "Spread of disease",
      C: "Spread of disease",
      Java: "Spread of disease",
      Pascal: "Spread of disease",
      Python: "Spread of disease",
      TypeScript: "Spread of disease",
    },
  },
  {
    groupId: "Cellular",
    id: "GameOfLife",
    names: {
      BASIC: "Conway’s Game of Life",
      C: "Conway’s Game of Life",
      Java: "Conway’s Game of Life",
      Pascal: "Conway’s Game of Life",
      Python: "Conway’s Game of Life",
      TypeScript: "Conway’s Game of Life",
    },
  },
  {
    groupId: "Cellular",
    id: "GameOfLifeSetup",
    names: {
      BASIC: "Game of Life with user setup",
      C: "Game of Life with user setup",
      Java: "Game of Life with user setup",
      Pascal: "Game of Life with user setup",
      Python: "Game of Life with user setup",
      TypeScript: "Game of Life with user setup",
    },
  },
  {
    groupId: "Cellular",
    id: "LifeArrays",
    names: {
      BASIC: "Game of Life, using arrays",
      C: "Game of Life, using arrays",
      Java: "Game of Life, using arrays",
      Pascal: "Game of Life, using arrays",
      Python: "Game of Life, using arrays",
      TypeScript: "Game of Life, using arrays",
    },
  },
  {
    groupId: "Cellular",
    id: "Automata",
    names: {
      BASIC: "One-dimensional cellular automata",
      C: "One-dimensional cellular automata",
      Java: "One-dimensional cellular automata",
      Pascal: "One-dimensional cellular automata",
      Python: "One-dimensional cellular automata",
      TypeScript: "One-dimensional cellular automata",
    },
  },
  {
    groupId: "Cellular",
    id: "Diffusion",
    names: {
      BASIC: "A model of diffusion",
      C: "A model of diffusion",
      Java: "A model of diffusion",
      Pascal: "A model of diffusion",
      Python: "A model of diffusion",
      TypeScript: "A model of diffusion",
    },
  },
  {
    groupId: "Cellular",
    id: "Dendrites",
    names: {
      BASIC: "Dendritic crystal growth",
      C: "Dendritic crystal growth",
      Java: "Dendritic crystal growth",
      Pascal: "Dendritic crystal growth",
      Python: "Dendritic crystal growth",
      TypeScript: "Dendritic crystal growth",
    },
  },
  {
    groupId: "Cellular",
    id: "Schelling",
    names: {
      BASIC: "Schelling’s segregation model",
      C: "Schelling’s segregation model",
      Java: "Schelling’s segregation model",
      Pascal: "Schelling’s segregation model",
      Python: "Schelling’s segregation model",
      TypeScript: "Schelling’s segregation model",
    },
  },
  {
    groupId: "Cellular",
    id: "IteratedPD",
    names: {
      BASIC: "Iterated Prisoner’s Dilemma",
      C: "Iterated Prisoner’s Dilemma",
      Java: "Iterated Prisoner’s Dilemma",
      Pascal: "Iterated Prisoner’s Dilemma",
      Python: "Iterated Prisoner’s Dilemma",
      TypeScript: "Iterated Prisoner’s Dilemma",
    },
  },
  // examples 8 - Models
  {
    groupId: "Models",
    id: "AimCannon",
    names: {
      BASIC: "Firing a cannon (manual)",
      C: "Firing a cannon (manual)",
      Java: "Firing a cannon (manual)",
      Pascal: "Firing a cannon (manual)",
      Python: "Firing a cannon (manual)",
      TypeScript: "Firing a cannon (manual)",
    },
  },
  {
    groupId: "Models",
    id: "AutoCannon",
    names: {
      BASIC: "Firing a cannon (automatic)",
      C: "Firing a cannon (automatic)",
      Java: "Firing a cannon (automatic)",
      Pascal: "Firing a cannon (automatic)",
      Python: "Firing a cannon (automatic)",
      TypeScript: "Firing a cannon (automatic)",
    },
  },
  {
    groupId: "Models",
    id: "Launch",
    names: {
      BASIC: "Launching a rocket into orbit",
      C: "Launching a rocket into orbit",
      Java: "Launching a rocket into orbit",
      Pascal: "Launching a rocket into orbit",
      Python: "Launching a rocket into orbit",
      TypeScript: "Launching a rocket into orbit",
    },
  },
  {
    groupId: "Models",
    id: "BrownianMotion",
    names: {
      BASIC: "Brownian motion",
      C: "Brownian motion",
      Java: "Brownian motion",
      Pascal: "Brownian motion",
      Python: "Brownian motion",
      TypeScript: "Brownian motion",
    },
  },
  {
    groupId: "Models",
    id: "Cheetahs",
    names: {
      BASIC: "Cheetahs and gazelles",
      C: "Cheetahs and gazelles",
      Java: "Cheetahs and gazelles",
      Pascal: "Cheetahs and gazelles",
      Python: "Cheetahs and gazelles",
      TypeScript: "Cheetahs and gazelles",
    },
  },
  {
    groupId: "Models",
    id: "SexRatio",
    names: {
      BASIC: "The sex ratio",
      C: "The sex ratio",
      Java: "The sex ratio",
      Pascal: "The sex ratio",
      Python: "The sex ratio",
      TypeScript: "The sex ratio",
    },
  },
  {
    groupId: "Models",
    id: "Flocking",
    names: {
      BASIC: "Flocking behaviour",
      C: "Flocking behaviour",
      Java: "Flocking behaviour",
      Pascal: "Flocking behaviour",
      Python: "Flocking behaviour",
      TypeScript: "Flocking behaviour",
    },
  },
  {
    groupId: "Models",
    id: "Roads",
    names: {
      BASIC: "Town road simulation",
      C: "Town road simulation",
      Java: "Town road simulation",
      Pascal: "Town road simulation",
      Python: "Town road simulation",
      TypeScript: "Town road simulation",
    },
  },
  {
    groupId: "Models",
    id: "Interference",
    names: {
      BASIC: "Wave interference tutor",
      C: "Wave interference tutor",
      Java: "Wave interference tutor",
      Pascal: "Wave interference tutor",
      Python: "Wave interference tutor",
      TypeScript: "Wave interference tutor",
    },
  },
  {
    groupId: "Models",
    id: "TwoSlits",
    names: {
      BASIC: "Interference from two slits",
      C: "Interference from two slits",
      Java: "Interference from two slits",
      Pascal: "Interference from two slits",
      Python: "Interference from two slits",
      TypeScript: "Interference from two slits",
    },
  },
  // examples 9 - Fractals
  {
    groupId: "Fractals",
    id: "RecursionFactory",
    names: {
      BASIC: "Recursion factory",
      C: "Recursion factory",
      Java: "Recursion factory",
      Pascal: "Recursion factory",
      Python: "Recursion factory",
      TypeScript: "Recursion factory",
    },
  },
  {
    groupId: "Fractals",
    id: "RecursiveTree",
    names: {
      BASIC: "Recursive tree",
      C: "Recursive tree",
      Java: "Recursive tree",
      Pascal: "Recursive tree",
      Python: "Recursive tree",
      TypeScript: "Recursive tree",
    },
  },
  {
    groupId: "Fractals",
    id: "KochSnowflake",
    names: {
      BASIC: "Koch snowflake",
      C: "Koch snowflake",
      Java: "Koch snowflake",
      Pascal: "Koch snowflake",
      Python: "Koch snowflake",
      TypeScript: "Koch snowflake",
    },
  },
  {
    groupId: "Fractals",
    id: "SquareKoch",
    names: {
      BASIC: "Square Koch fractal curves",
      C: "Square Koch fractal curves",
      Java: "Square Koch fractal curves",
      Pascal: "Square Koch fractal curves",
      Python: "Square Koch fractal curves",
      TypeScript: "Square Koch fractal curves",
    },
  },
  {
    groupId: "Fractals",
    id: "Sierpinski",
    names: {
      BASIC: "Sierpinski triangle (by deletion)",
      C: "Sierpinski triangle (by deletion)",
      Java: "Sierpinski triangle (by deletion)",
      Pascal: "Sierpinski triangle (by deletion)",
      Python: "Sierpinski triangle (by deletion)",
      TypeScript: "Sierpinski triangle (by deletion)",
    },
  },
  {
    groupId: "Fractals",
    id: "SierpinskiDots",
    names: {
      BASIC: "Sierpinski triangle (by random dots)",
      C: "Sierpinski triangle (by random dots)",
      Java: "Sierpinski triangle (by random dots)",
      Pascal: "Sierpinski triangle (by random dots)",
      Python: "Sierpinski triangle (by random dots)",
      TypeScript: "Sierpinski triangle (by random dots)",
    },
  },
  {
    groupId: "Fractals",
    id: "IFSBackground",
    names: {
      BASIC: "Iterated function systems (IFS) background",
      C: "Iterated function systems (IFS) background",
      Java: "Iterated function systems (IFS) background",
      Pascal: "Iterated function systems (IFS) background",
      Python: "Iterated function systems (IFS) background",
      TypeScript: "Iterated function systems (IFS) background",
    },
  },
  {
    groupId: "Fractals",
    id: "IFSColour",
    names: {
      BASIC: "IFS mappings on coloured background",
      C: "IFS mappings on coloured background",
      Java: "IFS mappings on coloured background",
      Pascal: "IFS mappings on coloured background",
      Python: "IFS mappings on coloured background",
      TypeScript: "IFS mappings on coloured background",
    },
  },
  {
    groupId: "Fractals",
    id: "IFSDemonstrator",
    names: {
      BASIC: "IFS demonstrator program",
      C: "IFS demonstrator program",
      Java: "IFS demonstrator program",
      Pascal: "IFS demonstrator program",
      Python: "IFS demonstrator program",
      TypeScript: "IFS demonstrator program",
    },
  },
  {
    groupId: "Fractals",
    id: "Logistic",
    names: {
      BASIC: "Logistic equation",
      C: "Logistic equation",
      Java: "Logistic equation",
      Pascal: "Logistic equation",
      Python: "Logistic equation",
      TypeScript: "Logistic equation",
    },
  },
  {
    groupId: "Fractals",
    id: "LogisticSpider",
    names: {
      BASIC: "Logistic spider",
      C: "Logistic spider",
      Java: "Logistic spider",
      Pascal: "Logistic spider",
      Python: "Logistic spider",
      TypeScript: "Logistic spider",
    },
  },
  {
    groupId: "Fractals",
    id: "MandelbrotDemo",
    names: {
      BASIC: "Mandelbrot multi-colour",
      C: "Mandelbrot multi-colour",
      Java: "Mandelbrot multi-colour",
      Pascal: "Mandelbrot multi-colour",
      Python: "Mandelbrot multi-colour",
      TypeScript: "Mandelbrot multi-colour",
    },
  },
  {
    groupId: "Fractals",
    id: "MandelbrotSpectrumDemo",
    names: {
      BASIC: "Mandelbrot spectral colours",
      C: "Mandelbrot spectral colours",
      Java: "Mandelbrot spectral colours",
      Pascal: "Mandelbrot spectral colours",
      Python: "Mandelbrot spectral colours",
      TypeScript: "Mandelbrot spectral colours",
    },
  },
  {
    groupId: "Fractals",
    id: "Quine",
    names: {
      BASIC: "Quine (self-replicating) program",
      C: "Quine (self-replicating) program",
      Java: "Quine (self-replicating) program",
      Pascal: "Quine (self-replicating) program",
      Python: "Quine (self-replicating) program",
      TypeScript: "Quine (self-replicating) program",
    },
  },
  // examples 10 - Logic&CS
  {
    groupId: "Logic&CS",
    id: "Hanoi",
    names: {
      BASIC: "Tower of Hanoi by recursion",
      C: "Tower of Hanoi by recursion",
      Java: "Tower of Hanoi by recursion",
      Pascal: "Tower of Hanoi by recursion",
      Python: "Tower of Hanoi by recursion",
      TypeScript: "Tower of Hanoi by recursion",
    },
  },
  {
    groupId: "Logic&CS",
    id: "IterateRoot",
    names: {
      BASIC: "Square roots by iteration",
      C: "Square roots by iteration",
      Java: "Square roots by iteration",
      Pascal: "Square roots by iteration",
      Python: "Square roots by iteration",
      TypeScript: "Square roots by iteration",
    },
  },
  {
    groupId: "Logic&CS",
    id: "Fibonaccis",
    names: {
      BASIC: "Fibonaccis (using ARRAY and TIME)",
      C: "Fibonaccis (using ARRAY and TIME)",
      Java: "Fibonaccis (using ARRAY and TIME)",
      Pascal: "Fibonaccis (using ARRAY and TIME)",
      Python: "Fibonaccis (using ARRAY and TIME)",
      TypeScript: "Fibonaccis (using ARRAY and TIME)",
    },
  },
  {
    groupId: "Logic&CS",
    id: "Sorting",
    names: {
      BASIC: "Comparison of sorting methods",
      C: "Comparison of sorting methods",
      Java: "Comparison of sorting methods",
      Pascal: "Comparison of sorting methods",
      Python: "Comparison of sorting methods",
      TypeScript: "Comparison of sorting methods",
    },
  },
  {
    groupId: "Logic&CS",
    id: "SortingStrings",
    names: {
      BASIC: "Comparison of sorting methods (strings)",
      C: "Comparison of sorting methods (strings)",
      Java: "Comparison of sorting methods (strings)",
      Pascal: "Comparison of sorting methods (strings)",
      Python: "Comparison of sorting methods (strings)",
      TypeScript: "Comparison of sorting methods (strings)",
    },
  },
  {
    groupId: "Logic&CS",
    id: "NoughtsAndCrosses",
    names: {
      BASIC: "Noughts and crosses",
      C: "Noughts and crosses",
      Java: "Noughts and crosses",
      Pascal: "Noughts and crosses",
      Python: "Noughts and crosses",
      TypeScript: "Noughts and crosses",
    },
  },
  {
    groupId: "Logic&CS",
    id: "NimLearn",
    names: {
      BASIC: "Nim learning program",
      C: "Nim learning program",
      Java: "Nim learning program",
      Pascal: "Nim learning program",
      Python: "Nim learning program",
      TypeScript: "Nim learning program",
    },
  },
  {
    groupId: "Logic&CS",
    id: "MultiNim",
    names: {
      BASIC: "Nim with multiple piles",
      C: "Nim with multiple piles",
      Java: "Nim with multiple piles",
      Pascal: "Nim with multiple piles",
      Python: "Nim with multiple piles",
      TypeScript: "Nim with multiple piles",
    },
  },
  {
    groupId: "Logic&CS",
    id: "KnightsTour",
    names: {
      BASIC: "Knight’s Tour program",
      C: "Knight’s Tour program",
      Java: "Knight’s Tour program",
      Pascal: "Knight’s Tour program",
      Python: "Knight’s Tour program",
      TypeScript: "Knight’s Tour program",
    },
  },
  // these last two examples don't yet compile properly :(
  // new Example('Logic&CS', 'TuringMachines', 'Turing machine simulator'),
  // new Example('Logic&CS', 'Syllogisms', 'Syllogism testing program')
];

export const groups: Group[] = [
  {
    index: 0,
    id: "CSAC",
    title: "other CSAC programs",
    examples: examples.filter((x) => x.groupId === "CSAC"),
  },
  {
    index: 1,
    id: "Drawing",
    title: "drawing and counting loops",
    examples: examples.filter((x) => x.groupId === "Drawing"),
  },
  {
    index: 2,
    id: "Procedures",
    title: "procedures, functions and recursion",
    examples: examples.filter((x) => x.groupId === "Procedures"),
  },
  {
    index: 3,
    id: "Further",
    title: "further commands and structures",
    examples: examples.filter((x) => x.groupId === "Further"),
  },
  {
    index: 4,
    id: "Movement",
    title: "smooth movement and bouncing",
    examples: examples.filter((x) => x.groupId === "Movement"),
  },
  // {
  //   index: 5,
  //   id: "Files",
  //   title: "file and directory handling",
  //   examples: examples.filter((x) => x.groupId === "Files"),
  // },
  {
    index: 5,
    id: "Interaction",
    title: "user input, interaction and games",
    examples: examples.filter((x) => x.groupId === "Interaction"),
  },
  {
    index: 6,
    id: "Cellular",
    title: "cellular models",
    examples: examples.filter((x) => x.groupId === "Cellular"),
  },
  {
    index: 7,
    id: "Models",
    title: "other models",
    examples: examples.filter((x) => x.groupId === "Models"),
  },
  {
    index: 8,
    id: "Fractals",
    title: "self-similarity and chaos",
    examples: examples.filter((x) => x.groupId === "Fractals"),
  },
  {
    index: 9,
    id: "Logic&CS",
    title: "computer science and logic",
    examples: examples.filter((x) => x.groupId === "Logic&CS"),
  },
];
