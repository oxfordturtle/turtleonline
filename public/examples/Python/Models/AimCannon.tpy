# Constants
gunlength=1000
distancecol=green
timecol=red

# Draw axes of graph
def graphaxes():
    thickness(5)
    setxy(9700,600)
    drawxy(0,3900)
    drawxy(-9000,0) # x axis 700 to 9700
    drawxy(0,-3900) # y axis 4500 to 600
    for n in range(0,91,5):
        setxy(650+n*100,4600)
        display(str(n),2,16)
    for n in range(10):
        setxy(100,4350-n*400)
        display(str(n*1000),2,16)
    for n in range(10):
        setxy(9900,4380-n*400)
        display(str(n*20),2,16)
    setxy(4000,4900)
    display("Angle of elevation",2,24)
    colour(distancecol)
    setxy(0,100)
    display("Distance",2,24)
    colour(timecol)
    setxy(9600,100)
    display("Time",2,24)

# Plot coloured point on graph
def plot(x: int,y: int,col: int):
    setxy(700+x*100,4500-y*2/5)
    colour(col)
    blot(40)

# Draw cannon and aim by clicking on cream-coloured arc
def aim():
    clickcol=white
    while clickcol!=red:
        if clickcol==cream:
            if (?mousex>=250) and (?mousey<=9750):
                turnxy(?mousex-250,?mousey-9750)
        noupdate()
        setxy(0,10000)
        colour(cream)
        blot(1600)
        colour(yellowgreen)
        blot(1400)
        colour(maroon)
        setxy(250,9750)
        blot(250)
        forward(gunlength)
        setxy(250,9750)
        colour(red)
        blot(100)
        update()
        detect(\lmouse,0)
        clickcol=pixcol(?mousex,?mousey)

# Fire the cannon
def fire(xvel: int,yvel: int,gravity: int,floor: int):
    global steps,turty
    setxy(250,9750)
    steps=0
    while (turty!=floor):
        steps=steps+1
        if (pixcol(turtx,turty)==black):
            colour(white)
            blot(90)
        movexy(xvel,yvel)
        yvel=yvel+gravity
        if (turty>floor):
            turty=floor
        if ((pixcol(turtx,turty)==white) or (turty==floor)):
            colour(black)
            blot(75)
        update()
        pause(10)
        noupdate()

# Set up Canvas, initialise angle to 45 degrees, and loop
canvas(0,0,10500,10000)
graphaxes()
turtd=45
thickness(20)
while (1==1):
    aim()
    print("Elevation: "+str(90-turtd), end="")
    fire(cos(90-turtd,1,96),sin(90-turtd,1,-96),1,9950)
    print("  Distance: "+str(turtx)," Time: "+str(steps))
    plot(90-turtd,turtx,distancecol)
    plot(90-turtd,steps*50,timecol)
