pauseval=2000

def setsierpinski():
    global xleft,xright,ytop,ybottom,scaledown
    global mappings,live,copied,seedx,seedy,coeffdiv
    global mapxx,mapyx,mapxy,mapyy,mapxc,mapyc
    xleft=0
    xright=999
    ytop=0
    ybottom=999
    scaledown=2
    mappings=3
    live=black
    copied=darkgrey
    seedx=250
    seedy=0
    coeffdiv=100
    mapxx=[50,50,50]
    mapyx=[0,0,0]
    mapxy=[0,0,0]
    mapyy=[50,50,50]
    mapxc=[250,0,500]
    mapyc=[0,500,500]

def setbarnsley():
    global xleft,xright,ytop,ybottom,scaledown
    global mappings,live,copied,seedx,seedy,coeffdiv
    global mapxx,mapyx,mapxy,mapyy,mapxc,mapyc
    xleft=-236
    xright=263
    ytop=1
    ybottom=1000
    scaledown=2
    mappings=4
    live=seagreen
    copied=emerald
    seedx=1
    seedy=1
    coeffdiv=100
    mapxx=[0,85,20,-15]
    mapyx=[0,-4,23,26]
    mapxy=[0,4,-26,28]
    mapyy=[16,85,22,24]
    mapxc=[0,0,0,0]
    mapyc=[0,160,160,44]

def setdragon():
    global xleft,xright,ytop,ybottom,scaledown
    global mappings,live,copied,seedx,seedy,coeffdiv
    global mapxx,mapyx,mapxy,mapyy,mapxc,mapyc
    xleft=0
    xright=999
    ytop=0
    ybottom=999
    scaledown=4
    mappings=3
    live=black
    copied=silver
    seedx=1
    seedy=1
    coeffdiv=1000
    mapxx=[0,0,0]
    mapyx=[-577,-577,-577]
    mapxy=[577,577,577]
    mapyy=[0,0,0]
    mapxc=[95,441,95]
    mapyc=[589,789,989]

def startprompt():
    global uniform,seedpixel
    output(True,cream,True)
    keyecho(False)
    print('ITERATED FUNCTIONS ON COLOURED BACKGROUND')
    print()
    print('Select Barnsley fern, Sierpinski, or Dragon curve? (B/S/D) ', end='')
    keyecho(False)
    det=0
    while (det!=\b) and (det!=\s) and (det!=\d):
        det=detect(\key,0)
    print(chr(det))
    if det==\b:
        print('Barnsley fern mappings will be used')
        setbarnsley()
    elif det==\s:
        print('Sierpinski mappings will be used')
        setsierpinski()
    else:
        print('Dragon curve mappings will be used')
        setdragon()
    print()
    print('Start with single Pixel or entire Canvas? (P/C) ', end='')
    while (det!=\p) and (det!=\c):
        det=detect(\key,0)
    print(chr(det))
    seedpixel=(det==\p)
    print()
    print('Use Uniform or Different colours for mappings? (U/D) ', end='')
    while (det!=\u) and (det!=\d):
        det=detect(\key,0)
    print(chr(det))
    uniform=(det==\u)
    output(False,white,False)

def domap(mapnum):
    noupdate()
    for y in range(yt,yb+1):
        for x in range(xl,xr+1):
            if pixcol(x,y)!=white:
                newx=divmult(x,coeffdiv,mapxx[mapnum])+divmult(y,coeffdiv,mapxy[mapnum])+mapxc[mapnum]
                newy=divmult(x,coeffdiv,mapyx[mapnum])+divmult(y,coeffdiv,mapyy[mapnum])+mapyc[mapnum]
            if pixcol(newx,newy)==white:
                numborn+=1
            if uniform:
                pixset(newx,newy,copied)
            else:
                pixset(newx,newy,rgb(mapnum+1))
    update()

def cleanup():
    noupdate()
    for y in range(yt,yb+1):
        for x in range(xl,xr+1):
            if pixcol(x,y)==live:
                pixset(x,y,white)
                numkilled+=1
            elif pixcol(x,y)!=white:
                pixset(x,y,live)
    update()

startprompt()
xl=xleft/scaledown # no separate SETSCALE subroutine
xr=xright/scaledown
yt=ytop/scaledown
yb=ybottom/scaledown
for i in range(mappings):
    mapxc[i]=mapxc[i]/scaledown
    mapyc[i]=mapyc[i]/scaledown
canvas(xl,yt,xr-xl+1,yb-yt+1)
resolution(xr-xl+1,yb-yt+1)
if seedpixel:
    pixset(seedx,seedy,live)
else:
    blank(live)
iteration=0
timeset(0)
flag=True
while flag or (numborn+numkilled>0):
    flag=False
    starttime=time()
    iteration+=1
    print()
    print('Iteration '+str(iteration)+':')
    numborn=0
    for count in range(mappings):
        domap(count)
    numkilled=0
    cleanup()
    print('  '+str(numborn)+' pixels born; '+str(numkilled)+' pixels killed')
    print('  (took '+str((time()-starttime)/1000)+' seconds - total '+str(time()/1000)+' seconds so far)')
    if (numborn+numkilled>0) and (pauseval>=1000):
        print('  (now pausing '+qstr(pauseval,1000,1)+' seconds to allow halting if desired ...)')
        pause(pauseval)
        print()
print('FINISH - fixed point of iterative mapping has been reached')
for count in range(mappings):
    domap(count)
